service: backend

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  versionFunctions: false
  websocketsApiName: my-websockets-api
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  websocketsDescription: Serverless Websockets
  deploymentBucket:
    name: websockets-api-deployment
  iam:
    role:
      statements:
        - Effect: Allow
          Action: ['dynamodb:PutItem', 'dynamodb:Scan', 'dynamodb:Delete*']
          Resource: !GetAtt [usersTable, Arn]

package:
  individually: true

functions:
  connectionHandler:
    handler: lambdas/connect/index.handler
    environment:
      TABLE_NAME: ${self:resources.Resources.usersTable.Properties.TableName}
    events:
      - websocket:
          route: $connect
  disconnectionHandler:
    handler: lambdas/disconnect/index.handler
    environment:
      TABLE_NAME: ${self:resources.Resources.usersTable.Properties.TableName}
    events:
      - websocket:
          route: $disconnect
  sendMessageHandler:
    handler: lambdas/sendMessage/index.handler
    environment:
      TABLE_NAME: ${self:resources.Resources.usersTable.Properties.TableName}
    events:
      - websocket: $default #simple event definition without extra route property

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connectedUsersTable
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: 'PAY_PER_REQUEST'
  Outputs:
    webSocketUri:
      Value: !Join [ '', [ 'wss://', !Ref WebsocketsApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref WebsocketsDeploymentStage] ]

plugins:
 - serverless-esbuild
 - serverless-deployment-bucket

custom:
  esbuild:
    bundle: true
    minify: false
  deploymentBucket:
    blockPublicAccess: true
